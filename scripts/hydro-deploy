#!/bin/bash
# Deploy the given commit of libcchdo. Defaults to master.

# Two installations: alpha and beta.
# Alpha will be the currently running version
# Beta will be the last known good version
#
# If needed to rollback, alpha will be swapped with beta.
#
# To handle multiple installations (edge), there can be addition installations.
# These should be named.
#
# The activator script should be able to distinguish between the names and
# activate the appropriate installation. It will default to alpha.
# 
# Since alpha usually exists, it may be possible to clone the virtualenv to
# avoid installation overheads.

set -e;

GIT_REPO="git@bitbucket.org:ghdc/libcchdo.git";

DEPLOY_DIR="/usr/local/cchdo/hydro-deploy";
SOURCE_DIR="${DEPLOY_DIR}/src";
VENV_DIR_BASE="${DEPLOY_DIR}/hydro";
VENV_TEMP="_";
VENV_ALPHA="a";
VENV_BETA="b";
VENV_DIR_TEMP="${VENV_DIR_BASE}_${VENV_TEMP}";
VENV_DIR_ALPHA="${VENV_DIR_BASE}_${VENV_ALPHA}";
VENV_DIR_BETA="${VENV_DIR_BASE}_${VENV_BETA}";

function swap_alpha_beta {
        rm -rf ${VENV_DIR_TEMP};
        virtualenv-clone ${VENV_DIR_ALPHA} ${VENV_DIR_TEMP};
        rm -rf ${VENV_DIR_ALPHA};
        virtualenv-clone ${VENV_DIR_BETA} ${VENV_DIR_ALPHA};
        rm -rf ${VENV_DIR_BETA};
        virtualenv-clone ${VENV_DIR_TEMP} ${VENV_DIR_BETA};
        rm -rf ${VENV_DIR_TEMP};
}

if [[ $1 == "--help" ]]; then
        cat <<EOI
Usage: hydro-deploy [--help|--deploy-dir|--rollback] [commit] [installation]
Install the specified commit as an installation.

Arguments:
commit - the git commit to install (default: master)
installation - the installation name (default: ${VENV_ALPHA})

If the installation is the default, $0 will first install in ${VENV_BETA} and,
when, successful, will swap the ${VENV_ALPHA} and ${VENV_BETA} installations.
Such an operation should keep the installations in recoverable states in case
of failure.

Optional flags:
EOI
        echo -e "\t--deploy-dir Prints the deployment directory"
        echo -e "\t--rollback Swaps alpha and beta installations"
        exit 0
elif [[ $1 == "--deploy-dir" ]]; then
        echo "${DEPLOY_DIR}";
        exit 0
elif [[ $1 == "--rollback" ]]; then
        echo "Rolling back by swapping alpha and beta installs.";
        swap_alpha_beta;
        exit 0
fi

# Default commit is current master
commit=$1;
if [[ ${commit} == "" ]]; then
        commit="master";
fi

# Default installation method when no installation name is given
# 1. install as alpha
# 2. if alpha exists, install as beta and swap out
# If a name is given, just install over it.
installation=$2;
swap_install=0;
if [[ ${installation} == "" ]]; then
        if [[ -d ${VENV_DIR_ALPHA} ]]; then
                installation="${VENV_BETA}";
                rm -rf ${installation};
                swap_install=1;
        else
                installation="${VENV_ALPHA}";
        fi
else
        # Ensure the installation name is not a special name (_, alpha, or
        # beta) and also does not contain illegal characters (/)
        if [[ "${installation}" =~ ^(${VENV_TMP}|${VENV_ALPHA}|${VENV_BETA})$|.*\/.*  ]]; then
                echo "invalid installation name: ${installation}";
                exit 1;
        fi
fi
echo "installing ${commit} as ${installation}";
if [ ${swap_install} -ne 0 ]; then
        echo "on successful install, will swap with current ${VENV_ALPHA}";
fi
VENV_DIR="${VENV_DIR_BASE}_${installation}";

# Create venv if it doesn't exist.
if [ ! -d ${VENV_DIR} ]; then
        # If an alpha install exists, we can clone it to bypass most of the
        # package dependency installation.
        if [[ -d ${VENV_DIR_ALPHA} ]]; then
                virtualenv-clone ${VENV_DIR_ALPHA} ${VENV_DIR};
        else
                one_up="$(dirname ${VENV_DIR})";
                mkdir -p ${one_up};
                virtualenv --no-site-packages --distribute ${VENV_DIR};
        fi
fi

# Activate the venv and upgrade.
source "${VENV_DIR}/bin/activate";

# Check out the source if not checked out.
if [ ! -d ${SOURCE_DIR} ]; then
        echo "Retrieving source code...";
        one_up="$(dirname ${SOURCE_DIR})";
        mkdir -p ${one_up};
        pushd ${one_up} &> /dev/null;
        name=$(basename ${SOURCE_DIR});
        git clone ${GIT_REPO} ${name};
        pushd ${name} &> /dev/null;
        git remote add myshen "git@bitbucket.org:myshen/libcchdo.git";
        git remote add abarna "git@bitbucket.org:abarna/libcchdo.git";
        popd &> /dev/null;
        popd &> /dev/null;
fi

pushd ${SOURCE_DIR} &> /dev/null;

git fetch --all;
git checkout "${commit}";

echo -n "Upgrading from ";

vfrom=$(hydro --version 2>&1 | tail -n 1 | tr -d "\n");
vto="hydro $(git describe)";
echo -n ${vfrom};

if [[ ${vfrom} == ${vto} ]]; then
        echo "...no version change.";
        exit 0;
fi

echo -n "...installing dependencies" >&2;
pip install numpy &> /dev/null;
pip install -e .[all] &> /dev/null;
echo -n "...installing..." >&2;
pip install --upgrade . &> /dev/null;

popd &> /dev/null;

echo -n " to ";
hydro --version 2>&1 | tail -n 1;

deactivate;

# swapping installation
if [ ${swap_install} -ne 0 ]; then
        swap_alpha_beta;
fi
