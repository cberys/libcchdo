# Source this file, don't run it!
# The contents need to modify your current shell to work.
#
# By default, loads the virtualenv in /usr/local/lib/libcchdo
#
# A good thing to do might be to alias hydro-on="source hydro-on"
#
# Usage:
# source hydro-on /path/to/venv

deploy_dir="/usr/local/cchdo/hydro-deploy";
venv_prefix="hydro_";
venv_default="a";
venv_dir_base="${deploy_dir}/${venv_prefix}";

# If a temp venv exists, do not allow activation.
if [[ -d "${venv_dir_base}_" ]]; then
        echo "hydro is being upgraded. Please try again in a moment.";
        return
fi

function list_installed() {
        if [ ! -d ${deploy_dir} ]; then
                echo "No installations. Use hydro-deploy to install.";
        else
                echo "Known installations:";
                python <<EOI
from glob import glob
import os.path
from subprocess import check_output, STDOUT
for path in glob("${venv_dir_base}*/"):
    print os.path.basename(path[:-1]).split('_')[1], "\t",
    print check_output(
        '{0}bin/hydro --version'.format(path), shell=True, stderr=STDOUT
        ).split('\n')[-2]
EOI
                #find "${deploy_dir}" -name "${venv_prefix}*" -type d | cut -c7-;
        fi
}

# copies function named $1 to name $2
# http://stackoverflow.com/questions/1203583/how-do-i-rename-a-bash-function
function copy_function() {
        declare -F $1 > /dev/null || return 1;
        # ZSH declare misses the opening curly bracket while BASH doesn't
        declarer=$(echo "function ${2}()"; if [ -n "$ZSH_VERSION" ]; then
                echo "{"
        fi; declare -f ${1} | tail -n +2);
        eval "${declarer}";
}

# Determine whether this file was sourced or run.
if [ -n "$ZSH_VERSION" ]; then
        propername="hydro-on";
elif [ -n "$BASH_VERSION" ]; then
        propername="-bash";
else
        propername="";
fi
if [ "X${0}" != "X${propername}" ]; then
        echo "${0} ${propername}";
        echo "hydro-on needs to be sourced, not run."
        echo "Usage: source hydro-on [-l] [installation]"
else
        # If -l is given, show the known installations.
        if [[ $1 = "-l" ]]; then
                list_installed;
                return
        elif [[ $1 != "" ]]; then
                venv_dir="${venv_dir_base}$1";
        else
                venv_dir="${venv_dir_base}${venv_default}";
        fi

        # Ensure the selected installation is available.
        if [[ ! -d ${venv_dir} ]]; then
                echo "Could not find installation: ${venv_dir}";
                list_installed;
                return;
        fi

        # If CSH, then activate CSH
        if [ "${propername}" = "" ]; then
                source "${venv_dir}/bin/activate.csh";
        else
                # If ZSH, load bashcompinit for compatibility
                if [ "${propername}" = "hydro-on" ]; then
                        if ! bashcompinit >/dev/null 2>&1; then
                                autoload -U bashcompinit
                                bashcompinit
                        fi
                fi
                source "${venv_dir}/bin/activate";
                command -v register-python-argcomplete &> /dev/null;
                if [ $? -eq 0 ]; then
                        eval "$(register-python-argcomplete hydro)";
                else
                        echo "No argcomplete--install argcomplete."
                fi
        fi

        # create hydro-off command alias that deactivates the installation
        unalias hydro-on &> /dev/null || true;
        copy_function deactivate deactivate_venv;
        alias hydro-off="deactivate";

        function deactivate() {
                unalias hydro-off;
                deactivate_venv;
                unset -f deactivate_venv;
                alias hydro-on="source hydro-on";
        }
fi
